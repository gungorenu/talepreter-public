// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Talepreter.AnecdoteSvc.DBContext;

#nullable disable

namespace Talepreter.AnecdoteSvc.DBMigrations.Migrations
{
    [DbContext(typeof(AnecdoteSvcDBContext))]
    partial class AnecdoteSvcDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("SubIndexSequence", "shared");

            modelBuilder.Entity("Talepreter.AnecdoteSvc.DBContext.Anecdote", b =>
                {
                    b.Property<Guid>("TaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaleVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastUpdatedChapter")
                        .HasColumnType("int");

                    b.Property<int>("LastUpdatedPageInChapter")
                        .HasColumnType("int");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PluginData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PublishState")
                        .HasColumnType("int");

                    b.Property<Guid>("WriterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TaleId", "TaleVersionId", "Id");

                    b.HasIndex("TaleId");

                    b.HasIndex("TaleId", "TaleVersionId");

                    b.HasIndex("TaleVersionId", "ParentId");

                    b.HasIndex("TaleId", "TaleVersionId", "Id", "PublishState");

                    b.ToTable("Anecdotes");
                });

            modelBuilder.Entity("Talepreter.BaseTypes.Command", b =>
                {
                    b.Property<Guid>("TaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaleVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("Phase")
                        .HasColumnType("int");

                    b.Property<int>("SubIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR shared.SubIndexSequence");

                    b.Property<string>("ArrayParameters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Attempts")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrainId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrainType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HasChild")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OperationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Parent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Prequisite")
                        .HasColumnType("int");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WriterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TaleId", "TaleVersionId", "ChapterId", "PageId", "Index", "Phase", "SubIndex");

                    b.HasIndex("TaleId", "TaleVersionId", "ChapterId", "PageId", "Phase");

                    b.ToTable("Commands");
                });

            modelBuilder.Entity("Talepreter.BaseTypes.ExtensionData", b =>
                {
                    b.Property<Guid>("TaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaleVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastUpdatedChapter")
                        .HasColumnType("int");

                    b.Property<int>("LastUpdatedPageInChapter")
                        .HasColumnType("int");

                    b.Property<string>("PluginData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PublishState")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("WriterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TaleId", "TaleVersionId", "Id");

                    b.HasIndex("TaleId");

                    b.HasIndex("TaleId", "TaleVersionId");

                    b.HasIndex("TaleId", "TaleVersionId", "Type");

                    b.HasIndex("TaleId", "TaleVersionId", "Id", "PublishState");

                    b.HasIndex("TaleId", "TaleVersionId", "BaseId", "Type", "PublishState");

                    b.ToTable("PluginRecords");
                });

            modelBuilder.Entity("Talepreter.BaseTypes.Trigger", b =>
                {
                    b.Property<Guid>("TaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaleVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GrainId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrainType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Parameter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TriggerAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("WriterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TaleId", "TaleVersionId", "Id");

                    b.HasIndex("TaleId");

                    b.HasIndex("TaleId", "TaleVersionId", "Id", "Type");

                    b.HasIndex("TaleId", "TaleVersionId", "State", "TriggerAt");

                    b.ToTable("Triggers");
                });

            modelBuilder.Entity("Talepreter.AnecdoteSvc.DBContext.Anecdote", b =>
                {
                    b.HasOne("Talepreter.AnecdoteSvc.DBContext.Anecdote", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("TaleVersionId", "ParentId")
                        .HasPrincipalKey("TaleVersionId", "Id");

                    b.OwnsOne("Talepreter.AnecdoteSvc.DBContext.MentionEntryMetadata", "Entries", b1 =>
                        {
                            b1.Property<Guid>("AnecdoteTaleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("AnecdoteTaleVersionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AnecdoteId")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("AnecdoteTaleId", "AnecdoteTaleVersionId", "AnecdoteId");

                            b1.ToTable("Anecdotes");

                            b1.ToJson("Entries");

                            b1.WithOwner()
                                .HasForeignKey("AnecdoteTaleId", "AnecdoteTaleVersionId", "AnecdoteId");

                            b1.OwnsMany("Talepreter.AnecdoteSvc.DBContext.MentionEntry", "List", b2 =>
                                {
                                    b2.Property<Guid>("MentionEntryMetadataAnecdoteTaleId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("MentionEntryMetadataAnecdoteTaleVersionId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("MentionEntryMetadataAnecdoteId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    b2.Property<string>("Actors")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<int>("Chapter")
                                        .HasColumnType("int");

                                    b2.Property<string>("Content")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<long?>("Date")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("Page")
                                        .HasColumnType("int");

                                    b2.HasKey("MentionEntryMetadataAnecdoteTaleId", "MentionEntryMetadataAnecdoteTaleVersionId", "MentionEntryMetadataAnecdoteId", "Id");

                                    b2.ToTable("Anecdotes");

                                    b2.WithOwner()
                                        .HasForeignKey("MentionEntryMetadataAnecdoteTaleId", "MentionEntryMetadataAnecdoteTaleVersionId", "MentionEntryMetadataAnecdoteId");

                                    b2.OwnsOne("Talepreter.BaseTypes.Location", "Location", b3 =>
                                        {
                                            b3.Property<Guid>("MentionEntryMetadataAnecdoteTaleId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<Guid>("MentionEntryMetadataAnecdoteTaleVersionId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<string>("MentionEntryMetadataAnecdoteId")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("MentionEntryId")
                                                .HasColumnType("int");

                                            b3.Property<string>("Extension")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Settlement")
                                                .IsRequired()
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("MentionEntryMetadataAnecdoteTaleId", "MentionEntryMetadataAnecdoteTaleVersionId", "MentionEntryMetadataAnecdoteId", "MentionEntryId");

                                            b3.ToTable("Anecdotes");

                                            b3.ToJson("Location");

                                            b3.WithOwner()
                                                .HasForeignKey("MentionEntryMetadataAnecdoteTaleId", "MentionEntryMetadataAnecdoteTaleVersionId", "MentionEntryMetadataAnecdoteId", "MentionEntryId");
                                        });

                                    b2.Navigation("Location");
                                });

                            b1.Navigation("List");
                        });

                    b.Navigation("Entries")
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Talepreter.BaseTypes.Command", b =>
                {
                    b.OwnsMany("Talepreter.BaseTypes.NamedParameter", "NamedParameters", b1 =>
                        {
                            b1.Property<Guid>("CommandTaleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("CommandTaleVersionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("CommandChapterId")
                                .HasColumnType("int");

                            b1.Property<int>("CommandPageId")
                                .HasColumnType("int");

                            b1.Property<int>("CommandIndex")
                                .HasColumnType("int");

                            b1.Property<int>("CommandPhase")
                                .HasColumnType("int");

                            b1.Property<int>("CommandSubIndex")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CommandTaleId", "CommandTaleVersionId", "CommandChapterId", "CommandPageId", "CommandIndex", "CommandPhase", "CommandSubIndex", "Id");

                            b1.ToTable("Commands");

                            b1.ToJson("NamedParameters");

                            b1.WithOwner()
                                .HasForeignKey("CommandTaleId", "CommandTaleVersionId", "CommandChapterId", "CommandPageId", "CommandIndex", "CommandPhase", "CommandSubIndex");
                        });

                    b.Navigation("NamedParameters");
                });

            modelBuilder.Entity("Talepreter.AnecdoteSvc.DBContext.Anecdote", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
