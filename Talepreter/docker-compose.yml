services:

  # infrastructure stuff

  sql-server: 
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sql-server
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: ${DB_PWD}
      MSSQL_PID: 'Developer'
    ports:
      - 1433:1433
    volumes:
      - ${VOLUME_MSSQL_DATA}:/var/opt/mssql/data/
      - ${VOLUME_MSSQL_LOGS}:/var/opt/mssql/logs/

  rabbitmq:
    image: ${REGISTRY:-dev.talepreter.io}/rabbitmq-custom:${TAG:-latest}
    container_name: rabbitmq
    hostname: rabbitmq
    build: # we added delayed message plugin manually, so it is custom
      context: ./
      dockerfile: RabbitMQ/Dockerfile
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PWD}
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ${VOLUME_RABBITMQ_DATA}:/var/lib/rabbitmq/
      - ${VOLUME_RABBITMQ_LOGS}:/var/log/rabbitmq/
 
  mongodb:
    image: mongodb/mongodb-community-server:latest
    container_name: mongodb
    hostname: mongodb
    ports:
      - 27017:27017
    environment:
      MONGODB_INITDB_ROOT_USERNAME: ${MONGODB_ADMIN_USER}
      MONGODB_INITDB_ROOT_PASSWORD: ${MONGODB_ADMIN_PWD}
    volumes:
      - ./volumes/mongodb/:/data/db/

  # db migrations

  dbmigrate-orleans-clustering:
    image: ${REGISTRY:-dev.talepreter.io}/dbmigrate-orleans-clustering:${TAG:-latest}
    container_name: dbmigrate-orleans-clustering
    build:
      context: ./
      dockerfile: DBMigrations/Talepreter.OrleansClustering.DBMigrations/Dockerfile
    depends_on:
      sql-server:
        condition: service_healthy
    environment:
      OrleansClusteringDBConnection: "Server=sql-server;Database=${DB_ORLEANS_CLUSTER};User Id=sa;Password='${DB_PWD}';TrustServerCertificate=true"

  dbmigrate-svc-tale:
    image: ${REGISTRY:-dev.talepreter.io}/dbmigrate-svc-tale:${TAG:-latest}
    container_name: dbmigrate-svc-tale
    build:
      context: ./
      dockerfile: DBMigrations/Talepreter.TaleSvc.DBMigrations/Dockerfile
    depends_on:
      sql-server:
        condition: service_healthy
    environment:
      DBConnection: "Server=sql-server;Database=${DB_TALESVC};User Id=sa;Password='${DB_PWD}';TrustServerCertificate=true"

  dbmigrate-svc-actor:
    image: ${REGISTRY:-dev.talepreter.io}/dbmigrate-svc-actor:${TAG:-latest}
    container_name: dbmigrate-svc-actor
    build:
      context: ./
      dockerfile: DBMigrations/Talepreter.ActorSvc.DBMigrations/Dockerfile
    depends_on:
      sql-server:
        condition: service_healthy
    environment:
      DBConnection: "Server=sql-server;Database=${DB_ACTORSVC};User Id=sa;Password='${DB_PWD}';TrustServerCertificate=true"

  dbmigrate-svc-anecdote:
    image: ${REGISTRY:-dev.talepreter.io}/dbmigrate-svc-anecdote:${TAG:-latest}
    container_name: dbmigrate-svc-anecdote
    build:
      context: ./
      dockerfile: DBMigrations/Talepreter.AnecdoteSvc.DBMigrations/Dockerfile
    depends_on:
      sql-server:
        condition: service_healthy
    environment:
      DBConnection: "Server=sql-server;Database=${DB_ANECDOTESVC};User Id=sa;Password='${DB_PWD}';TrustServerCertificate=true"

  dbmigrate-svc-person:
    image: ${REGISTRY:-dev.talepreter.io}/dbmigrate-svc-person:${TAG:-latest}
    container_name: dbmigrate-svc-person
    build:
      context: ./
      dockerfile: DBMigrations/Talepreter.PersonSvc.DBMigrations/Dockerfile
    depends_on:
      sql-server:
        condition: service_healthy
    environment:
      DBConnection: "Server=sql-server;Database=${DB_PERSONSVC};User Id=sa;Password='${DB_PWD}';TrustServerCertificate=true"

  dbmigrate-svc-world:
    image: ${REGISTRY:-dev.talepreter.io}/dbmigrate-svc-world:${TAG:-latest}
    container_name: dbmigrate-svc-world
    build:
      context: ./
      dockerfile: DBMigrations/Talepreter.WorldSvc.DBMigrations/Dockerfile
    depends_on:
      sql-server:
        condition: service_healthy
    environment:
      DBConnection: "Server=sql-server;Database=${DB_WORLDSVC};User Id=sa;Password='${DB_PWD}';TrustServerCertificate=true"

  dbmigrate-documentdb:
    image: ${REGISTRY:-dev.talepreter.io}/dbmigrate-documentdb:${TAG:-latest}
    container_name: dbmigrate-documentdb
    build:
      context: ./
      dockerfile: DBMigrations/Talepreter.DocumentDB.DBMigrations/Dockerfile
    depends_on:
      sql-server:
        condition: service_healthy
    environment:
      MongoDBConnection: "mongodb://${MONGODB_ADMIN_USER}:${MONGODB_ADMIN_PWD}@mongodb:27017/"
      MongoDBName: ${MONGODB_DBNAME}

  # services

  svc-tale:
    image: ${REGISTRY:-dev.talepreter.io}/svc-tale:${TAG:-latest}
    container_name: svc-tale
    build:
      context: ./
      dockerfile: Services/Talepreter.TaleSvc/Dockerfile
    ports:
      - 11111:11111
      - 30001:30001
    depends_on:
      sql-server:
        condition: service_healthy
    environment:
      DBConnection: "Server=sql-server;Database=${DB_TALESVC};User Id=sa;Password='${DB_PWD}';TrustServerCertificate=true"
      MongoDBConnection: "mongodb://${MONGODB_ADMIN_USER}:${MONGODB_ADMIN_PWD}@mongodb:27017/"
      MongoDBName: ${MONGODB_DBNAME}
      OrleansClusterDBConnection: "Server=sql-server;Database=${DB_ORLEANS_CLUSTER};User Id=sa;Password='${DB_PWD}';TrustServerCertificate=true"
      OrleansIPAddress: ${ORLEANS_IPADDRESS}
      OrleansClusterId: ${ORLEANS_CLUSTER}
      OrleansServiceId: TalepreterTaleSvc
      RabbitMQUser: ${RABBITMQ_USERNAME}
      RabbitMQPwd: ${RABBITMQ_PWD}
      RabbitMQServer: rabbitmq
      RabbitMQVirtualHost: ${RABBITMQ_VIRTUAL_HOST}
      RabbitMQConcurrentConsumerCount: ${RABBITMQ_CONSUMER_DISPATCH_CONCURRENCY}
      RabbitMQMaxPublishChannel: ${RABBITMQ_PUBLISHER_POOL}
      LoggingQueueReaders: ${LOG_QUEUEREADERS}
      LoggingQueuePublishers: ${LOG_QUEUEPUBLISHERS}
      LoggingCommandProcessors: ${LOG_COMMANDPROCESSORS}
      LoggingCommandExecutors: ${LOG_COMMANDEXECUTORS}
      LoggingGrains: ${LOG_GRAINS}
      RabbitMQExecuteTimeout: ${TIMEOUT_RABBITMQ_EXECUTE}
      GrainOperationTimeout: ${TIMEOUT_GRAINOPERATION}
      TaskManagerTimeout: ${TIMEOUT_TASKMANAGER}
      TaskManagerDelayTimeout: ${TIMEOUT_TASKMANAGER_DELAY}
      TaskManagerParallelTaskCount: ${TASKMANAGER_PARALLELTASKCOUNT}

  svc-world:
    image: ${REGISTRY:-dev.talepreter.io}/svc-world:${TAG:-latest}
    container_name: svc-world
    build:
      context: ./
      dockerfile: Services/Talepreter.WorldSvc/Dockerfile
    ports:
      - 11112:11112
      - 30002:30002
    depends_on:
      sql-server:
        condition: service_healthy
    environment:
      DBConnection: "Server=sql-server;Database=${DB_WORLDSVC};User Id=sa;Password='${DB_PWD}';TrustServerCertificate=true"
      MongoDBConnection: "mongodb://${MONGODB_ADMIN_USER}:${MONGODB_ADMIN_PWD}@mongodb:27017/"
      MongoDBName: ${MONGODB_DBNAME}
      OrleansClusterDBConnection: "Server=sql-server;Database=${DB_ORLEANS_CLUSTER};User Id=sa;Password='${DB_PWD}';TrustServerCertificate=true"
      OrleansIPAddress: ${ORLEANS_IPADDRESS}
      OrleansClusterId: ${ORLEANS_CLUSTER}
      OrleansServiceId: TalepreterWorldSvc
      RabbitMQUser: ${RABBITMQ_USERNAME}
      RabbitMQPwd: ${RABBITMQ_PWD}
      RabbitMQServer: rabbitmq
      RabbitMQVirtualHost: ${RABBITMQ_VIRTUAL_HOST}
      RabbitMQConcurrentConsumerCount: ${RABBITMQ_CONSUMER_DISPATCH_CONCURRENCY}
      RabbitMQMaxPublishChannel: ${RABBITMQ_PUBLISHER_POOL}
      LoggingQueueReaders: ${LOG_QUEUEREADERS}
      LoggingQueuePublishers: ${LOG_QUEUEPUBLISHERS}
      LoggingCommandProcessors: ${LOG_COMMANDPROCESSORS}
      LoggingCommandExecutors: ${LOG_COMMANDEXECUTORS}
      LoggingGrains: ${LOG_GRAINS}
      RabbitMQExecuteTimeout: ${TIMEOUT_RABBITMQ_EXECUTE}
      GrainOperationTimeout: ${TIMEOUT_GRAINOPERATION}
      TaskManagerTimeout: ${TIMEOUT_TASKMANAGER}
      TaskManagerDelayTimeout: ${TIMEOUT_TASKMANAGER_DELAY}
      TaskManagerParallelTaskCount: ${TASKMANAGER_PARALLELTASKCOUNT}

  svc-actor:
    image: ${REGISTRY:-dev.talepreter.io}/svc-actor:${TAG:-latest}
    container_name: svc-actor
    build:
      context: ./
      dockerfile: Services/Talepreter.ActorSvc/Dockerfile
    ports:
      - 11113:11113
      - 30003:30003
    depends_on:
      sql-server:
        condition: service_healthy
    environment:
      DBConnection: "Server=sql-server;Database=${DB_ACTORSVC};User Id=sa;Password='${DB_PWD}';TrustServerCertificate=true"
      MongoDBConnection: "mongodb://${MONGODB_ADMIN_USER}:${MONGODB_ADMIN_PWD}@mongodb:27017/"
      MongoDBName: ${MONGODB_DBNAME}
      OrleansClusterDBConnection: "Server=sql-server;Database=${DB_ORLEANS_CLUSTER};User Id=sa;Password='${DB_PWD}';TrustServerCertificate=true"
      OrleansIPAddress: ${ORLEANS_IPADDRESS}
      OrleansClusterId: ${ORLEANS_CLUSTER}
      OrleansServiceId: TalepreterActorSvc
      RabbitMQUser: ${RABBITMQ_USERNAME}
      RabbitMQPwd: ${RABBITMQ_PWD}
      RabbitMQServer: rabbitmq
      RabbitMQVirtualHost: ${RABBITMQ_VIRTUAL_HOST}
      RabbitMQConcurrentConsumerCount: ${RABBITMQ_CONSUMER_DISPATCH_CONCURRENCY}
      RabbitMQMaxPublishChannel: ${RABBITMQ_PUBLISHER_POOL}
      LoggingQueueReaders: ${LOG_QUEUEREADERS}
      LoggingQueuePublishers: ${LOG_QUEUEPUBLISHERS}
      LoggingCommandProcessors: ${LOG_COMMANDPROCESSORS}
      LoggingCommandExecutors: ${LOG_COMMANDEXECUTORS}
      LoggingGrains: ${LOG_GRAINS}
      RabbitMQExecuteTimeout: ${TIMEOUT_RABBITMQ_EXECUTE}
      GrainOperationTimeout: ${TIMEOUT_GRAINOPERATION}
      TaskManagerTimeout: ${TIMEOUT_TASKMANAGER}
      TaskManagerDelayTimeout: ${TIMEOUT_TASKMANAGER_DELAY}
      TaskManagerParallelTaskCount: ${TASKMANAGER_PARALLELTASKCOUNT}

  svc-anecdote:
    image: ${REGISTRY:-dev.talepreter.io}/svc-anecdote:${TAG:-latest}
    container_name: svc-anecdote
    build:
      context: ./
      dockerfile: Services/Talepreter.AnecdoteSvc/Dockerfile
    ports:
      - 11114:11114
      - 30004:30004
    depends_on:
      sql-server:
        condition: service_healthy
    environment:
      DBConnection: "Server=sql-server;Database=${DB_ANECDOTESVC};User Id=sa;Password='${DB_PWD}';TrustServerCertificate=true"
      MongoDBConnection: "mongodb://${MONGODB_ADMIN_USER}:${MONGODB_ADMIN_PWD}@mongodb:27017/"
      MongoDBName: ${MONGODB_DBNAME}
      OrleansClusterDBConnection: "Server=sql-server;Database=${DB_ORLEANS_CLUSTER};User Id=sa;Password='${DB_PWD}';TrustServerCertificate=true"
      OrleansIPAddress: ${ORLEANS_IPADDRESS}
      OrleansClusterId: ${ORLEANS_CLUSTER}
      OrleansServiceId: TalepreterAnecdoteSvc
      RabbitMQUser: ${RABBITMQ_USERNAME}
      RabbitMQPwd: ${RABBITMQ_PWD}
      RabbitMQServer: rabbitmq
      RabbitMQVirtualHost: ${RABBITMQ_VIRTUAL_HOST}
      RabbitMQConcurrentConsumerCount: ${RABBITMQ_CONSUMER_DISPATCH_CONCURRENCY}
      RabbitMQMaxPublishChannel: ${RABBITMQ_PUBLISHER_POOL}
      LoggingQueueReaders: ${LOG_QUEUEREADERS}
      LoggingQueuePublishers: ${LOG_QUEUEPUBLISHERS}
      LoggingCommandProcessors: ${LOG_COMMANDPROCESSORS}
      LoggingCommandExecutors: ${LOG_COMMANDEXECUTORS}
      LoggingGrains: ${LOG_GRAINS}
      RabbitMQExecuteTimeout: ${TIMEOUT_RABBITMQ_EXECUTE}
      GrainOperationTimeout: ${TIMEOUT_GRAINOPERATION}
      TaskManagerTimeout: ${TIMEOUT_TASKMANAGER}
      TaskManagerDelayTimeout: ${TIMEOUT_TASKMANAGER_DELAY}
      TaskManagerParallelTaskCount: ${TASKMANAGER_PARALLELTASKCOUNT}

  svc-person:
    image: ${REGISTRY:-dev.talepreter.io}/svc-person:${TAG:-latest}
    container_name: svc-person
    build:
      context: ./
      dockerfile: Services/Talepreter.PersonSvc/Dockerfile
    ports:
      - 11115:11115
      - 30005:30005
    depends_on:
      sql-server:
        condition: service_healthy
    environment:
      DBConnection: "Server=sql-server;Database=${DB_PERSONSVC};User Id=sa;Password='${DB_PWD}';TrustServerCertificate=true"
      MongoDBConnection: "mongodb://${MONGODB_ADMIN_USER}:${MONGODB_ADMIN_PWD}@mongodb:27017/"
      MongoDBName: ${MONGODB_DBNAME}
      OrleansClusterDBConnection: "Server=sql-server;Database=${DB_ORLEANS_CLUSTER};User Id=sa;Password='${DB_PWD}';TrustServerCertificate=true"
      OrleansIPAddress: ${ORLEANS_IPADDRESS}
      OrleansClusterId: ${ORLEANS_CLUSTER}
      OrleansServiceId: TalepreterPersonSvc
      RabbitMQUser: ${RABBITMQ_USERNAME}
      RabbitMQPwd: ${RABBITMQ_PWD}
      RabbitMQServer: rabbitmq
      RabbitMQVirtualHost: ${RABBITMQ_VIRTUAL_HOST}
      RabbitMQConcurrentConsumerCount: ${RABBITMQ_CONSUMER_DISPATCH_CONCURRENCY}
      RabbitMQMaxPublishChannel: ${RABBITMQ_PUBLISHER_POOL}
      LoggingQueueReaders: ${LOG_QUEUEREADERS}
      LoggingQueuePublishers: ${LOG_QUEUEPUBLISHERS}
      LoggingCommandProcessors: ${LOG_COMMANDPROCESSORS}
      LoggingCommandExecutors: ${LOG_COMMANDEXECUTORS}
      LoggingGrains: ${LOG_GRAINS}
      RabbitMQExecuteTimeout: ${TIMEOUT_RABBITMQ_EXECUTE}
      GrainOperationTimeout: ${TIMEOUT_GRAINOPERATION}
      TaskManagerTimeout: ${TIMEOUT_TASKMANAGER}
      TaskManagerDelayTimeout: ${TIMEOUT_TASKMANAGER_DELAY}
      TaskManagerParallelTaskCount: ${TASKMANAGER_PARALLELTASKCOUNT}

